---
title: "R Practice: Functions"
format: html
---

## R Functions Warm Up
* Create a function called `double_it()` that doubles any value input value. 
```{r}

# here we are assigning a function with the parameter of x being the value that is doubled, and we are using the print function to give us our result to be multiplied by 2
double_it <- function(x){
  print(2 * x)
}
```

```{r}

double_it(x = 2)

```

* Write a function called `exclaim_age()` that returns the statement "I am ___ years old!" where the blank is entered by the user as an argument age. 
```{r}

exclaim_age <- function(age){
  print(paste("I am" , age , "years old"))
}

exclaim_age(age = 12)
exclaim_age(12)
```

## Functions with Conditionals
```{r}
# "find_max() function" #
find_max <- function(value_1, value_2) {
    
    if (value_1 > value_2) {
        return(value_1)
    }
    else if (value_2 > value_1) {
        return(value_2)
    }
}

find_max(12 , 24)

find_max(200, 2)

# we expect this function to find the max between two values wit the spit out part of this function to return value 1 if it is > than value 2 and vice versa. 
```

* run the function again, but this time use the function in an arithmetic expression. 
```{r}
find_max(12 - 2, 200 + 4)
# could do it this way or below 

5 * find_max(4, 2)
```

## Adding Error or Warning Messages
```{r}
find_max(4, 2, 5)
# when you run this, an error in find_max(4, 2, 5): unused argument(5) comes up because a third value was added and R doesn't know what to do with that because this function only requires two parameters
```

* what happens when we run this in the console?
```{r}
find_max(4, 4)
# `find_max()` function with error message
find_max <- function(value_1, value_2) {
    
    if (value_1 == value_2) {
        stop("Values must be different from each other.")
    }
    
    if (value_1 > value_2) {
        return(value_1)
    }
    else if (value_2 > value_1) {
        return(value_2)
    }
}

# we don't get a value at all when this is run, this is because the parameters are equal to each other and the function does not have a parameter for when they are equal to each other, only if they are less or greater than the other 
# now that we added that stop function to the parameters of it, we get an error message saying the values must be different from each other. 
```

```{r}
find_max(4, "cow")
find_max("cow" , 4)

find_max <- function(value_1, value_2) {
    
    # `|` is the logical OR operator
    # `!=` is the not-equal-to operator
    if (is.numeric(value_1) != TRUE | is.numeric(value_2) != TRUE) {
        # alt expression: is.numeric(value_1) == FALSE | is.numeric(value_2) == FALSE
        stop("Value must be a numeric type.")
    }
    
    if (value_1 == value_2) {
        stop("Values must be different from each other.")
    }
    
    if (value_1 > value_2) {
        return(value_1)
    }
    else if (value_2 > value_1) {
        return(value_2)
    }
}
# now we get an error, our value must be numeric
```

